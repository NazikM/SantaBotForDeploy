import telebot
from telebot import types
import random
import os
from dotenv import load_dotenv

from telebot.apihelper import ApiTelegramException

from db import checkGroupExists, addToDB, close_db, checkUserExists, checkOrganizerByUserID, getGroupNameByUserID, getNamesByGroup, getNameIdByName, addWishListByUserID, getWishListByName, deleteRecordsByGroupName, checkUserExistsInGroup, getOrganizerGroup

load_dotenv()
token = os.getenv('token')
bot = telebot.TeleBot(token)


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "–•–û –•–û –•–û  üéÖüèºÔ∏è ")
    keyboard = types.ReplyKeyboardMarkup(row_width=1)
    button1 = types.KeyboardButton('–°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É–ø—É‚ûï')
    button2 = types.KeyboardButton('–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏üôãüèº')
    button3 = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π —Å–ø–∏—Å–æ–∫ –ø–æ–±–∞–∂–∞–Ω—åüíå')
    button4 = types.KeyboardButton('–†–æ–∑–ø—Ä–∏–¥—ñ–ª–∏—Ç–∏üéÅ')
    keyboard.add(button1, button2, button3, button4)
    explanation_text = """–¶–µ–π –±–æ—Ç - —Ü–µ –æ—Å–æ–±–ª–∏–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –°–∞–Ω—Ç–∞ –ö–ª–∞—É—Å–∞ üéÖüèºÔ∏è.
     –í—ñ–Ω –¥–æ–ø–æ–º–∞–≥–∞—î –≤–∞–º –æ—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –∑ –≤–∞—à–∏–º–∏ –¥—Ä—É–∑—è–º–∏. 
     –Ø–∫—â–æ –≤–∏ –æ–±–∏—Ä–∞—î—Ç–µ –æ–ø—Ü—ñ—é '–°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É–ø—É‚ûï', –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É–ø—É –∑ –Ω–∞–∑–≤–æ—é,
     —ñ –∫–æ–∂–Ω–∏–π —É—á–∞—Å–Ω–∏–∫ –º–æ–∂–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –Ω–µ—ó, –æ–±–∏—Ä–∞—é—á–∏ '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏üôãüèº'.
    –õ–∏—à–µ —Ç–æ–¥—ñ, –∫–æ–ª–∏ –≤—Å—ñ —É—á–∞—Å–Ω–∏–∫–∏ –¥–æ—î–¥–Ω–∞—é—Ç—å—Å—è, –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä –∫–Ω–æ–ø–∫–æ—é '–†–æ–∑–ø—Ä–∏–¥—ñ–ª–∏—Ç–∏üéÅ' 
    –Ω–∞–¥—ñ—à–ª–µ—Ç—å—Å—è –∫–æ–∂–Ω–æ–º—É —É—á–∞—Å–Ω–∏–∫—É —ñ–º–µ–Ω–∞ –ª—é–¥–µ–π, –∫–æ–º—É –≤–∏ –¥–∞—Ä–∏—Ç–∏–º–µ—Ç–µ. –¶–µ —Å—Ç–≤–æ—Ä—é—î —á–∞—Ä—ñ–≤–Ω—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –æ–±–º—ñ–Ω—É –ø–æ–¥–∞—Ä—É–Ω–∫–∞–º–∏.
     –ù–µ—Ö–∞–π –†—ñ–∑–¥–≤–æ –±—É–¥–µ –Ω–µ–∑–∞–±—É—Ç–Ω—ñ–º! üéÑ"""
    bot.reply_to(message, explanation_text, reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == '–î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π —Å–ø–∏—Å–æ–∫ –ø–æ–±–∞–∂–∞–Ω—åüíå')
def add_user_handler(message):
    if checkUserExists(message.from_user.id):
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à—ñ—Ç—å –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤, —è–∫—ñ –± –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –æ—Ç—Ä–∏–º–∞–ª–∏üéÅ:")
        bot.register_next_step_handler(message, get_wish_list)
    else:
        bot.send_message(message.chat.id, "–î–ª—è –ø–æ—á–∞—Ç–∫—É –ø—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—è –¥–æ –≥—Ä—É–ø–∏üòâ")


def get_wish_list(message):
    chat_id = message.chat.id
    wish_list = message.text
    addWishListByUserID(message.from_user.id, wish_list)
    bot.send_message(chat_id, "–°–ø–∏—Å–æ–∫ –ø–æ–±–∞–∂–∞–Ω—å —Å–∫–ª–∞–¥–µ–Ω–∏–πüéÅ")


@bot.message_handler(func=lambda message: message.text == '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏üôãüèº')
def add_user_handler(message):
    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è:")
    bot.register_next_step_handler(message, get_user_name)


def get_user_name(message):
    chat_id = message.chat.id
    user_name = message.text

    bot.send_message(chat_id, "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏, –¥–æ —è–∫–æ—ó –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ—î–¥–Ω–∞—Ç–∏—Å—è:")
    bot.register_next_step_handler(message, add_to_group_step, user_name)


def add_to_group_step(message, user_name):
    chat_id = message.chat.id
    user_id = message.from_user.id
    group_name = message.text

    add_to_group(chat_id, group_name, user_name, user_id)


def add_to_group(chat_id, group_name, user_name, user_id):

    if checkGroupExists(group_name):
        if checkUserExistsInGroup(user_id, group_name):
            bot.send_message(chat_id, "–í–∏ –≤–∂–µ –¥–æ–ª—É—á–∏–ª–∏—Å—è –¥–æ –≥—Ä—É–ø–∏‚úÖ")
        else:
            addToDB(group_name, user_name, user_id, False)
            bot.send_message(chat_id, "–í–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–ª—É—á–∏–ª–∏—Å—è –¥–æ –≥—Ä—É–ø–∏üéâ –ö–æ–ª–∏ –≤—Å—ñ –¥–æ—î–¥–Ω–∞—é—Ç—å—Å—è –¥–æ –≥—Ä—É–ø–∏, –≤–∞–º –ø—Ä–∏–π–¥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–º`—è–º –ª—é–¥–∏–Ω–∏, —è–∫—ñ–π –≤–∏ –º–∞—î—Ç–µ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ü§´")
    else:
        bot.send_message(chat_id, "–¢–∞–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–µ —ñ—Å–Ω—É—î, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞‚ùóÔ∏è –Ø–∫—â–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞ –Ω–µ–º–∞—î, —ñ –≤–∏ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É–ø—É –Ω–∞–∂–º—ñ—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—Éüòâ")


def create_group(message, chat_id, group_name, user_name, user_id):

    if not checkGroupExists(group_name):
        addToDB(group_name, user_name, user_id, True)
        bot.send_message(chat_id, f"–ì—Ä—É–ø—É –∑ –Ω–∞–∑–≤–æ—é '{group_name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! –¢–µ–ø–µ—Ä —ñ–Ω—à—ñ –º–æ–∂—É—Ç—å –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –Ω–µ—ó.")
    else:
        bot.send_message(chat_id, f"–ì—Ä—É–ø–∞ –∑ –Ω–∞–∑–≤–æ—é '{group_name}' –≤–∂–µ —ñ—Å–Ω—É—î. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏.")
        bot.register_next_step_handler(message, create_group_step, user_name)



@bot.message_handler(func=lambda message: message.text == '–°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É–ø—É‚ûï')
def create_group_handler(message):
    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è:")
    bot.register_next_step_handler(message, get_user_name_create)


def get_user_name_create(message):
    chat_id = message.chat.id
    user_name = message.text

    bot.send_message(chat_id, "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏:")
    bot.register_next_step_handler(message, create_group_step, user_name)


def create_group_step(message, user_name):
    chat_id = message.chat.id
    user_id = message.from_user.id
    group_name = message.text

    create_group(message, chat_id, group_name, user_name, user_id)  # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø–∏


@bot.message_handler(func=lambda message: message.text == '–†–æ–∑–ø—Ä–∏–¥—ñ–ª–∏—Ç–∏üéÅ')
def add_user_handler(message):
    user_id = message.from_user.id
    if checkUserExists(user_id):
        if checkOrganizerByUserID(user_id):
            split(getGroupNameByUserID(user_id))
        else:
            bot.send_message(message.chat.id, "–í–∏ –Ω–µ —î –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–æ–º, —Ç—ñ–ª—å–∫–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∞—Å —Ä–æ–∑–ø—Ä–∏–¥—ñ–ª–∏—Ç–∏‚ùóÔ∏è")
    else:
        bot.send_message(message.chat.id, "–í–∏ –Ω–µ —î –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–æ–º, –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –≥—Ä—É–ø—É‚ùóÔ∏è")


def split(group_name):
    names = getNamesByGroup(group_name)
    random.shuffle(names)
    msgs = []
    for i in range(len(names)):
        gives = getNameIdByName(names[i], group_name)
        receiver = names[(i + 1) % len(names)]
        wish_list = getWishListByName(receiver, group_name)
        send = "–í—ñ—Ç–∞—éüéÑ —Ç–∏ –¥–∞—Ä–∏—à: " + receiver + "\n–°–ø–∏—Å–æ–∫ –ø–æ–±–∞–∂–∞–Ω—å:" + wish_list
        try:
            msgs.append(bot.send_message(gives, send))
        except ApiTelegramException:
            bot.send_message(getOrganizerGroup(group_name), f"{names[i]} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏!")
            for msg in msgs:
                bot.delete_message(msg.chat.id, msg.id)
            return
    deleteRecordsByGroupName(group_name)


try:
    bot.infinity_polling()
except KeyboardInterrupt:
    close_db()
    exit()
